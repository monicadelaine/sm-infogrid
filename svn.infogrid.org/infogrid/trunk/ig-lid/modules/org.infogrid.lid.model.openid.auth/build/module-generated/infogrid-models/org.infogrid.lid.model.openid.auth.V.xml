<?xml version="1.0" encoding="UTF-8"?>
<!--
    This file is part of InfoGrid(tm). You may not use this file except in
    compliance with the InfoGrid license. The InfoGrid license and important
    disclaimers are contained in the file LICENSE.InfoGrid.txt that you should
    have received with InfoGrid. If you have not received LICENSE.InfoGrid.txt
    or you do not consent to all aspects of the license and the disclaimers,
    no license is granted; do not use this file.
 
    For more information about InfoGrid go to http://infogrid.org/

    Copyright 1998-2010 by R-Objects Inc. dba NetMesh Inc., Johannes Ernst
    All rights reserved.
-->

<!DOCTYPE model PUBLIC '-//InfoGrid.org//InfoGrid Model//EN' 'http://infogrid.org/dtds/model.dtd'>
<model>
    <subjectarea ID="org.infogrid.lid.model.openid.auth">
        <name>org.infogrid.lid.model.openid.auth</name>
        <username>OpenID Authentication Subject Area</username>
        <userdescription>The concepts defined by OpenID Authentication.</userdescription>

        <dependson>
            <subjectareareference>
                <name>org.infogrid.lid.model.yadis</name>
            </subjectareareference>
            <subjectareareference>
                <name>org.infogrid.lid.model.lid</name>
            </subjectareareference>
        </dependson>

        <entitytype ID="org.infogrid.lid.model.openid.auth/AuthenticationService">
            <name>AuthenticationService</name>
            <username>OpenID Authentication Service</username>
            <userdescription>This represents an OpenID Authentication Service in any version.</userdescription>
            <supertype>org.infogrid.lid.model.lid/WebAuthenticationService</supertype>
            <isabstract/>
            <synonym>http://openid.net/signon/</synonym>
            
            <propertytype ID="org.infogrid.lid.model.openid.auth/AuthenticationService_Delegate">
                <name>Delegate</name>
                <username>Delegate</username>
                <userdescription>The delegate identifier.</userdescription>
                <datatype>
                    <StringDataType/>
                </datatype>
                <isoptional/>
            </propertytype>
        </entitytype>        

        <entitytype ID="org.infogrid.lid.model.openid.auth/Authentication1Service">
            <name>Authentication1Service</name>
            <username>OpenID Authentication Service (version 1)</username>
            <userdescription>This represents an OpenID Authentication Service (version 1)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth/AuthenticationService</supertype>
            <isabstract/>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.openid.auth/Authentication1dot0Service">
            <name>Authentication1dot0Service</name>
            <username>OpenID Authentication Service (version 1.0)</username>
            <userdescription>This represents an OpenID Authentication Service (version 1.0)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth/Authentication1Service</supertype>
            <implementsMethod><![CDATA[
    public String determineRedirectUrl(
            String                            clientIdentifier,
            String                            returnToUrl,
            org.infogrid.util.context.Context context )
        throws
            org.infogrid.util.FactoryException
    {
        org.infogrid.lid.openid.OpenIdRpSideAssociationManager assocMgr
                = context.findContextObjectOrThrow( org.infogrid.lid.openid.OpenIdRpSideAssociationManager.class );
                        
        org.infogrid.lid.nonce.LidNonceManager nonceMgr
                = context.findContextObjectOrThrow( org.infogrid.lid.nonce.LidNonceManager.class );

        org.infogrid.mesh.set.OrderedMeshObjectSet endpoints
                = org.infogrid.lid.model.yadis.util.YadisUtil.determineOrderedEndpointWebResources( the_Delegate );
        if( endpoints.isEmpty() ) {
            return null;
        }
        MeshObject selectedEndpoint = endpoints.get(0);
        String     endpointUrl      = selectedEndpoint.getIdentifier().toExternalForm();

        String theDelegate = null;
        try {
            StringValue temp = getDelegate();
            if( temp != null ) {
                theDelegate = temp.value();
            }

        } catch( Throwable t ) {
            log.error( t );
            return null;
        }

        StringBuilder ret = new StringBuilder();
        ret.append( endpointUrl );
        org.infogrid.util.http.HTTP.appendArgumentPairToUrl( ret, "openid.mode=checkid_setup" );
        if( theDelegate != null ) {
            org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.identity", theDelegate );
        } else {
            org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.identity", clientIdentifier );
        }

        // add a nonce to the return-to URL
        String nonce = nonceMgr.generateNewNonce();

        returnToUrl = org.infogrid.util.http.HTTP.appendArgumentToUrl( returnToUrl, "lid-nonce", nonce );

        org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.return_to",  returnToUrl );
        // org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.trust_root", realm );

        org.infogrid.lid.openid.OpenIdRpSideAssociation association = assocMgr.obtainFor( endpointUrl );
                // may throw exception

        if( association != null ) {
            if( association.isCurrentlyValid() ) {
                org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.assoc_handle", association.getAssociationHandle() );
            } else {
                assocMgr.remove( association.getServerUrl() );
            }
        }
        return ret.toString();
    }        
          ]]></implementsMethod>
          <synonym>http://openid.net/signon/1.0</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.openid.auth/Authentication1dot1Service">
            <name>Authentication1dot1Service</name>
            <username>OpenID Authentication Service (version 1.1)</username>
            <userdescription>This represents an OpenID Authentication Service (version 1.1)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth/Authentication1Service</supertype>
            <implementsMethod><![CDATA[
    public String determineRedirectUrl(
            String                            clientIdentifier,
            String                            returnToUrl,
            org.infogrid.util.context.Context context )
        throws
            org.infogrid.util.FactoryException
    {
        org.infogrid.lid.openid.OpenIdRpSideAssociationManager assocMgr
                = context.findContextObjectOrThrow( org.infogrid.lid.openid.OpenIdRpSideAssociationManager.class );
                        
        org.infogrid.lid.nonce.LidNonceManager nonceMgr
                = context.findContextObjectOrThrow( org.infogrid.lid.nonce.LidNonceManager.class );

        org.infogrid.mesh.set.OrderedMeshObjectSet endpoints
                = org.infogrid.lid.model.yadis.util.YadisUtil.determineOrderedEndpointWebResources( the_Delegate );
        if( endpoints.isEmpty() ) {
            return null;
        }
        MeshObject selectedEndpoint = endpoints.get(0);
        String     endpointUrl      = selectedEndpoint.getIdentifier().toExternalForm();

        String theDelegate = null;
        try {
            StringValue temp = getDelegate();
            if( temp != null ) {
                theDelegate = temp.value();
            }

        } catch( Throwable t ) {
            log.error( t );
            return null;
        }

        StringBuilder ret = new StringBuilder();
        ret.append( endpointUrl );
        org.infogrid.util.http.HTTP.appendArgumentPairToUrl( ret, "openid.mode=checkid_setup" );
        if( theDelegate != null ) {
            org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.identity", theDelegate );
        } else {
            org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.identity", clientIdentifier );
        }

        // add a nonce to the return-to URL
        String nonce = nonceMgr.generateNewNonce();
            
        returnToUrl = org.infogrid.util.http.HTTP.appendArgumentToUrl( returnToUrl, "lid-nonce", nonce );

        org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.return_to",  returnToUrl );
        // org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.trust_root", realm );

        org.infogrid.lid.openid.OpenIdRpSideAssociation association = assocMgr.obtainFor( endpointUrl );
                // may throw exception

        if( association != null ) {
            if( association.isCurrentlyValid() ) {
                org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.assoc_handle", association.getAssociationHandle() );
            } else {
                assocMgr.remove( association.getServerUrl() );
            }
        }
        return ret.toString();
    }        
          ]]></implementsMethod>
          <synonym>http://openid.net/signon/1.1</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.openid.auth/Authentication2dot0Service">
            <name>Authentication2dot0Service</name>
            <username>OpenID Authentication Service (version 2.0)</username>
            <userdescription>This represents an OpenID Authentication Service (version 2.0)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth/AuthenticationService</supertype>
            <implementsMethod><![CDATA[
    public String determineRedirectUrl(
            String                            clientIdentifier,
            String                            returnToUrl,
            org.infogrid.util.context.Context context )
        throws
            org.infogrid.util.FactoryException
    {
        org.infogrid.lid.openid.OpenIdRpSideAssociationManager assocMgr
                = context.findContextObjectOrThrow( org.infogrid.lid.openid.OpenIdRpSideAssociationManager.class );

        org.infogrid.lid.nonce.LidNonceManager nonceMgr
                = context.findContextObjectOrThrow( org.infogrid.lid.nonce.LidNonceManager.class );

        org.infogrid.mesh.set.OrderedMeshObjectSet endpoints
                = org.infogrid.lid.model.yadis.util.YadisUtil.determineOrderedEndpointWebResources( the_Delegate );
        if( endpoints.isEmpty() ) {
            return null;
        }

        MeshObject selectedEndpoint = endpoints.get(0);
        String     endpointUrl      = selectedEndpoint.getIdentifier().toExternalForm();

        String theDelegate = null;
        try {
            StringValue temp = getDelegate();
            if( temp != null ) {
                theDelegate = temp.value();
            }

        } catch( Throwable t ) {
            log.error( t );
            return null;
        }

        StringBuilder ret = new StringBuilder();
        ret.append( endpointUrl );
        org.infogrid.util.http.HTTP.appendArgumentToUrl(     ret, "openid.ns", "http://specs.openid.net/auth/2.0" );
        org.infogrid.util.http.HTTP.appendArgumentPairToUrl( ret, "openid.mode=checkid_setup" );
        if( theDelegate != null ) {
            org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.claimed_id", theDelegate );
            org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.identity",   theDelegate );
        } else {
            org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.claimed_id", clientIdentifier );
            org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.identity",   clientIdentifier );
        }

        // add a nonce to the return-to URL
        String nonce = nonceMgr.generateNewNonce();

        returnToUrl = org.infogrid.util.http.HTTP.appendArgumentToUrl( returnToUrl, "lid-nonce", nonce );

        org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.return_to",  returnToUrl );
        // org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.trust_root", realm );
        // org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.realm",      realm );

        org.infogrid.lid.openid.OpenIdRpSideAssociation association = assocMgr.obtainFor( endpointUrl );
                // may throw exception

        if( association != null ) {
            if( association.isCurrentlyValid() ) {
                org.infogrid.util.http.HTTP.appendArgumentToUrl( ret, "openid.assoc_handle", association.getAssociationHandle() );
            } else {
                assocMgr.remove( association.getServerUrl() );
            }
        }
        return ret.toString();
        }
          ]]></implementsMethod>
          <synonym>http://specs.openid.net/auth/2.0/signon</synonym>
        </entitytype>

        
        <entitytype ID="org.infogrid.lid.model.openid.auth/RelyingPartyService">
            <name>RelyingPartyService</name>
            <username>OpenID Relying Party Service</username>
            <userdescription>This service is provided by OpenID RelyingParties in any version.</userdescription>
            <supertype>org.infogrid.lid.model.lid/RelyingPartyService</supertype>
            <synonym>http://specs.openid.net/auth/return_to</synonym>
        </entitytype>
        
        <entitytype ID="org.infogrid.lid.model.openid.auth/RelyingParty1dot0Service">
            <name>RelyingParty1dot0Service</name>
            <username>OpenID Relying Party Service (version 1.0)</username>
            <userdescription>This service is provided by OpenID RelyingParties (version 1.0)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth/RelyingPartyService</supertype>
            <synonym>http://specs.openid.net/auth/1.0/return_to</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.openid.auth/RelyingParty1dot1Service">
            <name>RelyingParty1dot1Service</name>
            <username>OpenID Relying Party Service (version 1.1)</username>
            <userdescription>This service is provided by OpenID RelyingParties (version 1.1)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth/RelyingPartyService</supertype>
            <synonym>http://specs.openid.net/auth/1.1/return_to</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.openid.auth/RelyingParty2dot0Service">
            <name>RelyingParty2dot0Service</name>
            <username>OpenID Relying Party Service (version 2.0)</username>
            <userdescription>This service is provided by OpenID RelyingParties (version 2.0)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth/RelyingPartyService</supertype>
            <synonym>http://specs.openid.net/auth/2.0/return_to</synonym>
        </entitytype>
    </subjectarea>
</model>
