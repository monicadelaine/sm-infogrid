//
// This file is part of InfoGrid(tm). You may not use this file except in
// compliance with the InfoGrid license. The InfoGrid license and important
// disclaimers are contained in the file LICENSE.InfoGrid.txt that you should
// have received with InfoGrid. If you have not received LICENSE.InfoGrid.txt
// or you do not consent to all aspects of the license and the disclaimers,
// no license is granted; do not use this file.
// 
// For more information about InfoGrid go to http://infogrid.org/
//
// Copyright 1998-2008 by R-Objects Inc. dba NetMesh Inc., Johannes Ernst
// All rights reserved.
//

package org.infogrid.probe.shadow;

/**
  * This interface is implemented by classes that are interested in events generated by a
  * ShadowMeshBase.
  *
  * <p>Generally, pairs of events are generated: the first one, through updateStarting,
  * when an update starts. The second event is generated when the update process is
  * finished, but there is one of three outcomes:</p>
  * <ol>
  *  <li>The update was finished successfully.</li>
  *  <li>The update was finished unsuccessfully because a problem occurred (e.g. network unavailable)</li>
  *  <li>The update was skipped because there were good reasons to believe that there weren't
  *      any changes (e.g. by examining the modification date of a file)</li>
  * </ol>
  */
public interface ShadowMeshBaseListener
{
    /**
      * An update of the information in the ShadowMeshBase is about to start.
      *
      * @param theEvent the event
      */
    public void updateStarting(
            ShadowMeshBaseEvent theEvent );

    /**
      * An update of the information in the ShadowMeshBase was skipped as there
      * were good reasons to believe that no changes in the data source would be found.
      *
      * @param theEvent the event
      */
    public void updateSkipped(
            ShadowMeshBaseEvent theEvent );

    /**
      * An update of the information in the ShadowMeshBase has just finished
      * successfully.
      *
      * @param theEvent the event
      */
    public void updateFinishedSuccessfully(
            ShadowMeshBaseEvent theEvent );

    /**
      * An update of the information in the ShadowMeshBase has just finished
      * unsuccessfully. The event indicates the problem.
      *
      * @param theEvent the event
      */
    public void updateFinishedUnsuccessfully(
            ShadowMeshBaseEvent theEvent );
}
