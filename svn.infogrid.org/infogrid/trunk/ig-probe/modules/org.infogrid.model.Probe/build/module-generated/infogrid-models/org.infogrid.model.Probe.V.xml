<?xml version="1.0" encoding="UTF-8"?>
<!--
    This file is part of InfoGrid(tm). You may not use this file except in
    compliance with the InfoGrid license. The InfoGrid license and important
    disclaimers are contained in the file LICENSE.InfoGrid.txt that you should
    have received with InfoGrid. If you have not received LICENSE.InfoGrid.txt
    or you do not consent to all aspects of the license and the disclaimers,
    no license is granted; do not use this file.
 
    For more information about InfoGrid go to http://infogrid.org/

    Copyright 1998-2009 by R-Objects Inc. dba NetMesh Inc., Johannes Ernst
    All rights reserved.
-->

<!DOCTYPE model PUBLIC '-//InfoGrid.org//InfoGrid Model//EN' 'http://infogrid.org/dtds/model.dtd'>
<model>
    <subjectarea ID="org.infogrid.model.Probe">
        <name>org.infogrid.model.Probe</name>
        <username>Probe Subject Area</username>
        <userdescription>Captures the information necessary for the management of Probes.</userdescription>

        <entitytype ID="org.infogrid.model.Probe/ProbeUpdateSpecification">
            <name>ProbeUpdateSpecification</name>
            <username>Probe Update Specification</username>
            <userdescription>A Home Object of a Probe is blessed with a subtype of this ProbeUpdateSpecification.
It expresses meta-data such as when the Probe was last run, when it should be run next etc.
Subtypes may implement different algorithms to determine the respective data.</userdescription>
            <isabstract/>
            <declaresMethod><![CDATA[
    /**
     * A successful run was just performed, but the data source did not change and no update was necessary.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public abstract void performedSuccessfulRunNoChange(
            long consumedTime )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException;
         ]]></declaresMethod>
            <declaresMethod><![CDATA[
    /**
     * A successful run was just performed, the data source did change, and this is how long the run took.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public abstract void performedSuccessfulRunWithChange(
            long consumedTime )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException;
         ]]></declaresMethod>
            <declaresMethod><![CDATA[
    /**
     * An attempt to run the Probe was unsuccessful, and no new data could be obtained because a problem occurred.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @param problem the Throwable that was thrown by the Probe, indicating the problem
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public abstract void performedUnsuccessfulRun(
            long      consumedTime,
            Throwable problem )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException;
         ]]></declaresMethod>
            <declaresMethod><![CDATA[
    /**
     * Set the internal state of the Probe to stop automatic updates.
     */
    public abstract void stopUpdating();
         ]]></declaresMethod>

            <propertytype ID="org.infogrid.model.Probe/ProbeUpdateSpecification_NextProbeRun">
                <name>NextProbeRun</name>
                <username>Time of next Probe run</username>
                <userdescription>The time at which to run this Probe next. If this is not given, this indicates
&quot;never&quot;. If this is in the past, it means &quot;as soon as possible&quot;. This value
is given in Java's System.currentTimeMillis() format.</userdescription>
                <datatype>
                    <TimeStampDataType/>
                </datatype>
                <isoptional/>
            </propertytype>

            <propertytype ID="org.infogrid.model.Probe/ProbeUpdateSpecification_LastProbeRun">
                <name>LastProbeRun</name>
                <username>Time of most recent Probe run</username>
                <userdescription>The time that the last Probe run was attempted (successful or unsuccessful).
                  If this is not given, it means that the Probe was never run. This value
                  is given in Java's System.currentTimeMillis() format.</userdescription>
                <datatype>
                    <TimeStampDataType/>
                </datatype>
                <isoptional/>
            </propertytype>

            <propertytype ID="org.infogrid.model.Probe/ProbeUpdateSpecification_ProbeRunCounter">
                <name>ProbeRunCounter</name>
                <username>Probe-run counter</username>
                <userdescription>This value is incremented every time the Probe is run.</userdescription>
                <datatype>
                    <IntegerDataType/>
                </datatype>
                <defaultvalue>0</defaultvalue>
            </propertytype>

            <propertytype ID="org.infogrid.model.Probe/ProbeUpdateSpecification_LastRunUsedWritableProbe">
                <name>LastRunUsedWritableProbe</name>
                <username>Runs as Writable Probe</username>
                <userdescription>If this is true, the last Probe run used a WritableProbe.</userdescription>
                <datatype>
                    <BooleanDataType/>
                </datatype>
                <isoptional/>
            </propertytype>

            <propertytype ID="org.infogrid.model.Probe/ProbeUpdateSpecification_LastRunUsedProbeClass">
                <name>LastRunUsedProbeClass</name>
                <username>Runs using Probe Class</username>
                <userdescription>Name of the Probe Class that was used at the last run.</userdescription>
                <datatype>
                    <StringDataType/>
                </datatype>
                <isoptional/>
            </propertytype>

            <propertytype ID="org.infogrid.model.Probe/ProbeUpdateSpecification_WaitForOngoingResynchronization">
                <name>WaitForOngoingResynchronization</name>
                <username>Wait for ongoing resynchronization</username>
                <userdescription>If this is true, delay calling threads until triggered resynchronization requests have completed.</userdescription>
                <datatype>
                    <BooleanDataType/>
                </datatype>
                <defaultvalue>true</defaultvalue>
            </propertytype>
        </entitytype>

        <entitytype ID="org.infogrid.model.Probe/OneTimeOnlyProbeUpdateSpecification">
            <name>OneTimeOnlyProbeUpdateSpecification</name>
            <username>Once-ever Probe Update Specification</username>
            <supertype>org.infogrid.model.Probe/ProbeUpdateSpecification</supertype>

            <implementsMethod><![CDATA[
    /**
     * A successful run was just performed, but the data source did not change and no update was necessary.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public void performedSuccessfulRunNoChange(
            long consumedTime )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException
    {
        long counter = ((IntegerValue) the_Delegate.getPropertyValue( PROBERUNCOUNTER )).value();
        the_Delegate.setPropertyValue( PROBERUNCOUNTER, IntegerValue.create( ++counter ));
        the_Delegate.setPropertyValue( LASTPROBERUN, TimeStampValue.now() );
        the_Delegate.setPropertyValue( NEXTPROBERUN, null ); // never again

        if( log.isTraceEnabled() ) {
            log.traceMethodCallEntry( this, "performedSuccessfulRunNoChange" );
        }
    }
         ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * A successful run was just performed, the data source did change, and this is how long the run took.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public void performedSuccessfulRunWithChange(
            long consumedTime )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException
    {
        long counter = ((IntegerValue) the_Delegate.getPropertyValue( PROBERUNCOUNTER )).value();
        the_Delegate.setPropertyValue( PROBERUNCOUNTER, IntegerValue.create( ++counter ));
        the_Delegate.setPropertyValue( LASTPROBERUN, TimeStampValue.now() );
        the_Delegate.setPropertyValue( NEXTPROBERUN, null ); // never again

        if( log.isTraceEnabled() ) {
            log.traceMethodCallEntry( this, "performedSuccessfulRunWithChange" );
        }
     }
         ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * An attempt to run the Probe was unsuccessful,  and no new data could be obtained because a problem occurred.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @param problem the Throwable that was thrown by the Probe, indicating the problem
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public void performedUnsuccessfulRun(
            long      consumedTime,
            Throwable problem )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException
    {
        long counter = ((IntegerValue) the_Delegate.getPropertyValue( PROBERUNCOUNTER )).value();
        the_Delegate.setPropertyValue( PROBERUNCOUNTER, IntegerValue.create( ++counter ));
        the_Delegate.setPropertyValue( LASTPROBERUN, TimeStampValue.now() );
        the_Delegate.setPropertyValue( NEXTPROBERUN, null ); // never again

        if( log.isTraceEnabled() ) {
            log.traceMethodCallEntry( this, "performedUnsuccessfulRun" );
        }
    }
         ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * Set the internal state of the Probe to stop automatic updates.
     */
    public void stopUpdating()
    {
        // do nothing, this runs only once
    }
         ]]></implementsMethod>
        </entitytype>

        <entitytype ID="org.infogrid.model.Probe/PeriodicProbeUpdateSpecification">
            <name>PeriodicProbeUpdateSpecification</name>
            <username>Periodic Probe Update Specification</username>
            <supertype>org.infogrid.model.Probe/ProbeUpdateSpecification</supertype>

            <implementsMethod><![CDATA[
    /**
     * A successful run was just performed, but the data source did not change and no update was necessary.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public void performedSuccessfulRunNoChange(
            long consumedTime )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException
    {
        long counter = ((IntegerValue) the_Delegate.getPropertyValue( PROBERUNCOUNTER )).value();
        the_Delegate.setPropertyValue( PROBERUNCOUNTER, IntegerValue.create( ++counter ));
        
        the_Delegate.setPropertyValue( LASTPROBERUN, TimeStampValue.now() );

        long theDelay = ((IntegerValue) the_Delegate.getPropertyValue( DELAY )).value();
        the_Delegate.setPropertyValue( NEXTPROBERUN, TimeStampValue.nowWithOffset( theDelay ));

        if( log.isTraceEnabled() ) {
            log.traceMethodCallEntry( this, "performedSuccessfulRunNoChange" );
        }
    }
         ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * A successful run was just performed, the data source did change, and this is how long the run took.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public void performedSuccessfulRunWithChange(
            long consumedTime )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException
    {
        long counter = ((IntegerValue) the_Delegate.getPropertyValue( PROBERUNCOUNTER )).value();
        the_Delegate.setPropertyValue( PROBERUNCOUNTER, IntegerValue.create( ++counter ));
        
        the_Delegate.setPropertyValue( LASTPROBERUN, TimeStampValue.now() );

        long theDelay = ((IntegerValue) the_Delegate.getPropertyValue( DELAY )).value();
        the_Delegate.setPropertyValue( NEXTPROBERUN, TimeStampValue.nowWithOffset( theDelay ));

        if( log.isTraceEnabled() ) {
            log.traceMethodCallEntry( this, "performedSuccessfulRunWithChange" );
        }
    }
         ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * An attempt to run the Probe was unsuccessful,  and no new data could be obtained because a problem occurred.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @param problem the Throwable that was thrown by the Probe, indicating the problem
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public void performedUnsuccessfulRun(
            long      consumedTime,
            Throwable problem )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException
    {
        long counter = ((IntegerValue) the_Delegate.getPropertyValue( PROBERUNCOUNTER )).value();
        the_Delegate.setPropertyValue( PROBERUNCOUNTER, IntegerValue.create( ++counter ));
        
        the_Delegate.setPropertyValue( LASTPROBERUN, TimeStampValue.now() );

        long theDelay = ((IntegerValue) the_Delegate.getPropertyValue( DELAY )).value();
        the_Delegate.setPropertyValue( NEXTPROBERUN, TimeStampValue.nowWithOffset( theDelay ));

        if( log.isTraceEnabled() ) {
            log.traceMethodCallEntry( this, "performedUnsuccessfulRun" );
        }
    }
         ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * Set the internal state of the Probe to stop automatic updates.
     */
    public void stopUpdating()
    {
        try {
            the_Delegate.setPropertyValue( NEXTPROBERUN, null );
        } catch( Exception ex ) {
            log.error( ex );
        }
    }
         ]]></implementsMethod>

            <propertytype ID="org.infogrid.model.Probe/PeriodicProbeUpdateSpecification_Delay">
                <name>Delay</name>
                <username>Delay between Probe runs</username>
                <userdescription>Delay between the end of a Probe run and the start of the next Probe run.</userdescription>
                <datatype>
                    <IntegerDataType/>
                </datatype>
                <defaultvalue>86400000</defaultvalue><!-- 1 day -->
            </propertytype>
        </entitytype>

        <entitytype ID="org.infogrid.model.Probe/AdaptivePeriodicProbeUpdateSpecification">
            <name>AdaptivePeriodicProbeUpdateSpecification</name>
            <username>Adaptive Period Probe Update Specification</username>
            <supertype>org.infogrid.model.Probe/ProbeUpdateSpecification</supertype>

            <implementsMethod><![CDATA[
    /**
     * A successful run was just performed, but the data source did not change and no update was necessary.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public void performedSuccessfulRunNoChange(
            long consumedTime )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException
    {
        long counter = ((IntegerValue) the_Delegate.getPropertyValue( PROBERUNCOUNTER )).value();
        the_Delegate.setPropertyValue( PROBERUNCOUNTER, IntegerValue.create( ++counter ));
        
        double theAdaptiveFactor = ((FloatValue)   the_Delegate.getPropertyValue( ADAPTIVEFACTOR )).value();
        long   theCurrentDelay   = ((IntegerValue) the_Delegate.getPropertyValue( CURRENTDELAY )).value();

        long newDelay = (long) ( theCurrentDelay * theAdaptiveFactor );

        IntegerValue maxDelay = (IntegerValue) the_Delegate.getPropertyValue( MAXDELAY );
        if( maxDelay != null ) {
            newDelay = Math.min( newDelay, maxDelay.value() );
        }
        
        the_Delegate.setPropertyValue( CURRENTDELAY, IntegerValue.create( newDelay ));
        the_Delegate.setPropertyValue( LASTPROBERUN, TimeStampValue.now() );
        the_Delegate.setPropertyValue( NEXTPROBERUN, TimeStampValue.nowWithOffset( newDelay ));

        if( log.isTraceEnabled() ) {
            log.traceMethodCallEntry( this, "performedSuccessfulRunNoChange" );
        }
    }
         ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * A successful run was just performed, the data source did change, and this is how long the run took.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public void performedSuccessfulRunWithChange(
            long consumedTime )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException
    {
        long counter = ((IntegerValue) the_Delegate.getPropertyValue( PROBERUNCOUNTER )).value();
        the_Delegate.setPropertyValue( PROBERUNCOUNTER, IntegerValue.create( ++counter ));
        
        PropertyValue theFallbackDelay = the_Delegate.getPropertyValue( FALLBACKDELAY );
        the_Delegate.setPropertyValue( CURRENTDELAY, theFallbackDelay );
        the_Delegate.setPropertyValue( LASTPROBERUN, TimeStampValue.now() );
        the_Delegate.setPropertyValue( NEXTPROBERUN, TimeStampValue.nowWithOffset( ((IntegerValue)theFallbackDelay).value() ));

        if( log.isTraceEnabled() ) {
            log.traceMethodCallEntry( this, "performedSuccessfulRunWithChange" );
        }
    }
         ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * An attempt to run the Probe was unsuccessful,  and no new data could be obtained because a problem occurred.
     *
     * @param consumedTime the time in milliseconds that the update took
     * @param problem the Throwable that was thrown by the Probe, indicating the problem
     * @throws org.infogrid.mesh.IllegalPropertyTypeException thrown if the body of this method accessed an invalid PropertyType
     * @throws org.infogrid.mesh.IllegalPropertyValueException, thrown if the body of this method provided an invalid PropertyValue
     * @throws org.infogrid.mesh.NotPermittedException thrown if the caller was not permitted to invoke this operation
     * @throws org.infogrid.meshbase.transaction.TransactionException should not be thrown -- codegenerator faulty
     */
    public void performedUnsuccessfulRun(
            long      consumedTime,
            Throwable problem )
        throws
            org.infogrid.mesh.IllegalPropertyTypeException,
            org.infogrid.mesh.IllegalPropertyValueException,
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.meshbase.transaction.TransactionException
    {
        performedSuccessfulRunWithChange( consumedTime ); // simpler
    }
         ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * Set the internal state of the Probe to stop automatic updates.
     */
    public void stopUpdating()
    {
        try {
            the_Delegate.setPropertyValue( NEXTPROBERUN, null );
            the_Delegate.setPropertyValue( CURRENTDELAY, IntegerValue.create( 3600000 ) ); // back to default
        } catch( Exception ex ) {
            log.error( ex );
        }
    }
         ]]></implementsMethod>

            <propertytype ID="org.infogrid.model.Probe/PeriodicProbeUpdateSpecification_CurrentDelay">
                <name>CurrentDelay</name>
                <username>Current delay between Probe runs</username>
                <userdescription>The current delay between the end of a Probe run and the start of the next Probe run.
FIXME: this should use TimePeriodValue not IntegerValue.</userdescription>
                <datatype>
                    <IntegerDataType/>
                </datatype>
                <defaultvalue>3600000</defaultvalue><!-- one hour -->
            </propertytype>

            <propertytype ID="org.infogrid.model.Probe/PeriodicProbeUpdateSpecification_MaxDelay">
                <name>MaxDelay</name>
                <username>Maximum delay between Probe runs</username>
                <userdescription>The maximum delay between the end of a Probe run and the start of the next Probe run.
FIXME: this should use TimePeriodValue not IntegerValue.</userdescription>
                <datatype>
                    <IntegerDataType/>
                </datatype>
                <isoptional/>
                <defaultvalue>604800000</defaultvalue><!-- one week -->
            </propertytype>

            <propertytype ID="org.infogrid.model.Probe/PeriodicProbeUpdateSpecification_FallbackDelay">
                <name>FallbackDelay</name>
                <username>Fallback delay between Probe runs</username>
                <userdescription>The fallback delay between the end of a Probe run and the start of the next Probe run.
CurrentDelay is re-initialized to this value when a Probe run was unsuccessful, or data changed.
FIXME: this should use TimePeriodValue not IntegerValue.</userdescription>
                <datatype>
                    <IntegerDataType/>
                </datatype>
                <defaultvalue>600000</defaultvalue><!-- 10 minutes -->
            </propertytype>

            <propertytype ID="org.infogrid.model.Probe/PeriodicProbeUpdateSpecification_AdaptiveFactor">
                <name>AdaptiveFactor</name>
                <username>Adaptive Factor</username>
                <userdescription>The factor by which the delay increases for each Probe run that was successful and did not produce changed data.</userdescription>
                <datatype>
                    <FloatDataType/>
                </datatype>
                <defaultvalue>1.1</defaultvalue>
            </propertytype>
        </entitytype>
    </subjectarea>
</model>
