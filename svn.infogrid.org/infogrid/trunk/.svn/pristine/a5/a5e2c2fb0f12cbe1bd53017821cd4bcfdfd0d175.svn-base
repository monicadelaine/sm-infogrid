<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>Package org.infogrid.store</title>
  </head>
  <body>
    <p>Provides abstract facilities to store and recover blob data, named with
       keys in {@link org.infogrid.store.Store Stores}.</p>
    
    <p>As major web businesses such as Google and Amazon have shown, horizontal scalability often requires
       the storage of information in a non-relational manner, specifically as a <code>Map</code>, in which
       relatively short keys can identify &quot;blob&quot; objects of any size.</p>
    <p>This package provides the core abstractions for such a <code>Map</code> implementation, here
       called a {@link org.infogrid.store.Store}.</p>
    <p>The <code>Store</code> interface may be implemented in a variety of different ways, such as
       by storing objects in the file system, in one or more relational database instances, with or without
       redundancy etc. The <code>Store</code> abstraction is independent of the underlying implementation,
       which makes it a very powerful concept.</p>
    <p>The notion of an <code>encodingId</code> enables each element in a <code>Store</code> to be annotated
       with the manner in which it was encoded. This allows <code>Stores</code> with multiple encoding schemes
       in parallel, or an incremental migration from one encoding to another. By convention, the <code>encodingId</code>
       starts with the fully-qualified class name of the class that is used as encoder/decoder.</p>
  </body>
</html>
