<html>
 <head>
  <title>The org.infogrid.module package</title>
 </head>
 <body>
  <p>Defines the core concepts and mechanisms for InfoGrid Module management.</p>
  <p>The core idea behind InfoGrid Module management is to develop, maintain, upgrade
     and distribute software in pieces (known as Modules), rather than as one monolith.</p>
  <p>Java JAR files are a partial solution to the same problem: by distributing an application
     as several JAR files (instead of one single monolithic JAR file), an application can be
     distributed in pieces. However, JAR files have only very rudimentary dependency management
     capabilities and no sophisticated resolution strategies are supported.</p>
  <p>Java WebStart (JNLP) is also a partial solution to the same problem but is limited to
     web-deployed applications. It also misses functionality that is needed by InfoGrid.</p>
  <p>InfoGrid Module management works as follows:</p>
  <p>A Module is the unit of distribution. It consists of:</p>
  <ul>
   <li>One or more JAR files, containing the functionality of the Module.</li>
   <li>A Module Advertisement, describing the Module. In particular, it captures some
       meta-data (name of Module, version of Module etc.), a list of capabilities that the
       Module provides, and a list of other Modules that it requires for operation.</li>
  </ul>
  <p>For example, an application A may require a library L, which in turn depends on an
     XML parser X to be present. This application A would be deployed as a set of three
     Modules. Module A would contain the application functionality, and its Module Advertisement
     would specify that it depends on a Module L. Module L's advertisement would specify that it
     depends on another Module X.</p>
  <p>By doing this, a Module X, for example, can be downloaded once by the user although it
     is used by several applications (Modules have globally unique identifiers).</p>
  <p>Module management is implemented by a run-time infrastructure that is provided by this
     and its descendant packages. Implementation code for the Module (contained in the Module's
     JAR files) may interact with that run-time infrastructure, and determine things like
     other Modules currently loaded etc. Modules can also query the run-time infrastructure to
     obtain references to other Modules that are only known by their capabilities, not by their
     name. This is useful if a Module's capabilities may be implemented by several vendors,
     and a Module is only interested in obtaining certain functionality, but not the specific
     implementation.</p>
  <p>In the above example, Module L may only be interested in being able to find an XML
     parser, but does not care about which specific implementation from which specific vendor
     it is; just use one.</p>
  <p>Applications distributed under Module management will typically not have their own
     <code>main()</code> program, but use the <code>main()</code> program provided by
     one of the several Module &quot;boot loaders&quot;. For example, if the command-line
     boot loader is used, this boot loader has a <code>main()</code> program which parses
     certain command-line arguments, and based on those, determines which top-level (i.e.
     application-level) module needs to be invoked.</p>
  <p>Every Module has the ability to specify a static method in one of its classes as
     an initialization routine. When the Module management loads this Module, it will
     first call this initialization routine.</p>
 </body>
</html>
