<html>
 <head>
  <title>Package org.infogrid.jee.taglib.candy</title>
 </head>
 <body>
  <p>Tags to construct &quot;eye candy&quot;.</p>
  
  <h1>Overlays</h1>
  <p>{@link org.infogrid.jee.taglib.candy.OverlayTag OverlayTag} adds the contained
     HTML as an overlay to the current HTML page.</p>
  <p>The overlay is initially hidden. It is activated, in JavaScript, by calling
     <code>overlay_show( id )</code>, where <code>id</code> is the value of the <code>id</code>
     attribute of the <code>overlay</code> tag. Similarly, it is hidden by calling
     <code>overlay_hide( id )</code>.</p>
  <p>The following tag attributes are provided:</p>
  <table class="infogrid-border">
   <thead>
    <tr>
     <th width="15%">Attribute</th>
     <th width="60%">Meaning</th>
     <th>Required?</th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td><code>id</code></td>
     <td>Passed-through directly to the generated outer <code>div</code> element as its
         <code>id</code> attribute.</td>
     <td>optional</td>
    </tr>
    <tr>
     <td><code>htmlClass</code></td>
     <td>Passed-through directly to the generated outer <code>div</code> element as its
         <code>class</code> attribute. (Unfortunately, calling this attribute <code>class</code>
         collides with Java's use of the <code>getClass()</code> method.)</td>
     <td>optional</td>
    </tr>
   </tbody>
  </table>

  <h1>Tabbed navigation</h1>
  <p>Tabbed navigation is enabled through the collaboration of 4 tags:</p>
  <dl>
   <dt>{@link org.infogrid.jee.taglib.candy.TabbedTag TabbedTag}</dt>
   <dd>The outermost tab that represents tabbed navigation as a unit. This tag must only
       contain {@link org.infogrid.jee.taglib.candy.TabTag TabTags}, no other
       tags.</dd>
   <dt>{@link org.infogrid.jee.taglib.candy.TabTag TabTag}</dt>
   <dd>Collects a tab's header and content elements into one unit. This tag must be directly
       contained by a {@link org.infogrid.jee.taglib.candy.TabbedTag TabbedTag}.
       It must only contain exactly one {@link org.infogrid.jee.taglib.candy.TabHeaderTag TabHeaderTag}
       and one {@link org.infogrid.jee.taglib.candy.TabContentTag TabContentTag}.</dd>
   <dt>{@link org.infogrid.jee.taglib.candy.TabHeaderTag TabHeaderTag}</dt>
   <dd>Identifies the header of a single tab. This tag must be directly contained by a
       {@link org.infogrid.jee.taglib.candy.TabTag TabTag}.</dd>
   <dt>{@link org.infogrid.jee.taglib.candy.TabContentTag TabContentTag}</dt>
   <dd>Identifies the content of a single tab. This tag must be directly contained by a
       {@link org.infogrid.jee.taglib.candy.TabTag TabTag}.</dd>
  </dl>
  <p>{@link org.infogrid.jee.taglib.candy.TabbedTag TabbedTag} provides the following tag attributes:</p>
  <table class="infogrid-border">
   <thead>
    <tr>
     <th width="15%">Attribute</th>
     <th width="60%">Meaning</th>
     <th>Required?</th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td><code>id</code></td>
     <td>Passed-through directly to the generated outer <code>div</code> element as its
         <code>id</code> attribute.</td>
     <td>optional</td>
    </tr>
    <tr>
     <td><code>htmlClass</code></td>
     <td>Passed-through directly to the generated outer <code>div</code> element as its
         <code>class</code> attribute. (Unfortunately, calling this attribute <code>class</code>
         collides with Java's use of the <code>getClass()</code> method.)</td>
     <td>optional</td>
    </tr>
   </tbody>
  </table>
  <p>{@link org.infogrid.jee.taglib.candy.TabTag TabTag} provides the following tag attributes:</p>
  <table class="infogrid-border">
   <thead>
    <tr>
     <th width="15%">Attribute</th>
     <th width="60%">Meaning</th>
     <th>Required?</th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td><code>isSelected</code></td>
     <td>If true, this indicates that this tab is selected. If true, an additional CSS class is generated
        (<code>selected=&quot;selected&quot;</code>) for both the contained <code>TabHeaderTag</code> and
        the <code>TabBodyTag</code>. Also, the content of the <code>TabBodyTag</code> is processed (skipped
        otherwise).</td>
     <td>optional</td>
    </tr>
   </tbody>
  </table>
  <p>{@link org.infogrid.jee.taglib.candy.TabHeaderTag TabHeaderTag} provides the following tag attributes:</p>
  <table class="infogrid-border">
   <thead>
    <tr>
     <th width="15%">Attribute</th>
     <th width="60%">Meaning</th>
     <th>Required?</th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td><code>id</code></td>
     <td>Passed-through directly to the generated outer <code>div</code> element as its
         <code>id</code> attribute.</td>
     <td>optional</td>
    </tr>
    <tr>
     <td><code>htmlClass</code></td>
     <td>Passed-through directly to the generated outer <code>div</code> element as its
         <code>class</code> attribute. (Unfortunately, calling this attribute <code>class</code>
         collides with Java's use of the <code>getClass()</code> method.)</td>
     <td>optional</td>
    </tr>
   </tbody>
  </table>
  <p>{@link org.infogrid.jee.taglib.candy.TabContentTag TabContentTag} provides the following tag attributes:</p>
  <table class="infogrid-border">
   <thead>
    <tr>
     <th width="15%">Attribute</th>
     <th width="60%">Meaning</th>
     <th>Required?</th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td><code>id</code></td>
     <td>Passed-through directly to the generated outer <code>div</code> element as its
         <code>id</code> attribute.</td>
     <td>optional</td>
    </tr>
    <tr>
     <td><code>htmlClass</code></td>
     <td>Passed-through directly to the generated outer <code>div</code> element as its
         <code>class</code> attribute. (Unfortunately, calling this attribute <code>class</code>
         collides with Java's use of the <code>getClass()</code> method.)</td>
     <td>optional</td>
    </tr>
   </tbody>
  </table>
 </body>
</html>
